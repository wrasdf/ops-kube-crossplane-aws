---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xrpostgres.aws.v1beta1.afterpay.cloud
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: aws.v1beta1.afterpay.cloud/v1beta1
    kind: XRPostgres
  patchSets:
    - name: metadata
      patches:
        - fromFieldPath: metadata.labels
          toFieldPath: metadata.labels
  resources:
    - name: postgres-cluster-parameter-group
      base:
        apiVersion: rds.aws.upbound.io/v1beta1
        kind: ClusterParameterGroup
        metedata:
          name: postgres-cluster-parameter-group
        spec:
          forProvider:
            region: << .config.aws.region >>
            family: << .config.rds.postgres.family >>
            parameter:
              - name: rds.force_ssl
                value: 1
              - applyMethod: pending-reboot
                name: rds.logical_replication
                value: 1
        patches:
          - type: PatchSet
            patchSetName: metadata
          - fromFieldPath: spec.parameterGroupFamily
            toFieldPath: spec.forProvider.family
            policy:
              fromFieldPath: Required

    - name: postgres-parameter-group
      base:
        apiVersion: rds.aws.upbound.io/v1beta1
        kind: ParameterGroup
        metedata:
          name: postgres-parameter-group
        spec:
          forProvider:
            region: << .config.aws.region >>
            family: << .config.rds.postgres.family >>
            parameter:
              - applyMethod: pending-reboot
                name: shared_preload_libraries
                value: pg_stat_statements,pgaudit
        patches:
          - type: PatchSet
            patchSetName: metadata
          - fromFieldPath: spec.parameterGroupFamily
            toFieldPath: spec.forProvider.family
            policy:
              fromFieldPath: Required

    - name: postgres-instance
      base:
        apiVersion: rds.aws.upbound.io/v1beta1
        kind: ClusterInstance
        metadata:
          name: postgres-instances-0
        spec:
          forProvider:
            region: << .config.aws.region >>
            applyImmediately: << .config.rds.postgres.applyImmediately >>
            autoMinorVersionUpgrade: << .config.rds.postgres.autoMinorVersionUpgrade >>
            clusterIdentifierRef:
              name: postgres-cluster #TODO
            engine: << .config.rds.postgres.engine >>
            engineMode: << .config.rds.postgres.engineMode >> 
            engineVersion: "<< .config.rds.postgres.engineVersion >>" 
            copyTagsToSnapshot: true
            identifier: postgres-instances-0 #TODO
            instanceClass: << .config.rds.postgres.dbClusterInstanceClass >>
            dbParameterGroupName: postgres-parameter-group #TODO
            dbSubnetGroupNameRef: postgres-dbsubnetgroup-<< .config.aws.region >>
            performanceInsightsEnabled: << .config.rds.postgres.performanceInsightsEnabled >>
            preferredBackupWindow: << .config.rds.postgres.preferredBackupWindow >> #The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC.
            preferredMaintenanceWindow: << .config.rds.postgres.preferredMaintenanceWindow >> #The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
        patches:
          - type: PatchSet
            patchSetName: metadata
          - fromFieldPath: spec.engineVersion
            toFieldPath: spec.forProvider.engineVersion
            policy:
              fromFieldPath: Required
          - fromFieldPath: spec.dbClusterInstanceClass
            toFieldPath: spec.forProvider.dbClusterInstanceClass
            policy:
              fromFieldPath: Required
          - fromFieldPath: spec.performanceInsightsEnabled
            toFieldPath: spec.forProvider.performanceInsightsEnabled
          - fromFieldPath: spec.preferredBackupWindow
            toFieldPath: spec.forProvider.preferredBackupWindow
          - fromFieldPath: spec.preferredMaintenanceWindow
            toFieldPath: spec.forProvider.preferredMaintenanceWindow 
          - fromFieldPath: spec.applyImmediately
            toFieldPath: spec.forProvider.applyImmediately

    <<- $replica := .config.rds.replicas | coll.Pick .config.rds.primary >>
    - name: postgres-cluster
      base:
        apiVersion: rds.aws.upbound.io/v1beta1
        kind: Cluster
        metadata:
          name: postgres-cluster
        spec:
          forProvider:
            allocatedStorage: << .config.rds.postgres.allocatedStorage >> #The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster. 
            allowMajorVersionUpgrade: << .config.rds.postgres.allowMajorVersionUpgrade >> #Enable to allow major engine version upgrades when changing engine versions. Defaults to false.
            availabilityZones:
            <<- range $value := $replica >>
              <<- range $zone := $value.availabilityZones >>
              - << $zone >>
              <<- end >>
            <<- end >>
            applyImmediately: << .config.rds.postgres.applyImmediately >> #The target backtrack window, in seconds. Only available for aurora and aurora-mysql engines currently.  Defaults to 0. Must be between 0 and 259200 (72 hours)
            backupRetentionPeriod: << .config.rds.postgres.backupRetentionPeriod >> # The days to retain backups for. Default 1
            clusterMembers: # List of RDS Instances that are a part of this cluster
              - postgres-instances-0 #TODO
            copyTagsToSnapshot: true # Copy all Cluster tags to snapshots. Default is false.
            databaseName: << .config.rds.postgres.databaseName >> #Name for an automatically created database on cluster creation.
            dbClusterInstanceClass: << .config.rds.postgres.dbClusterInstanceClass >> # The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge.
            dbClusterParameterGroupName: postgres-cluster-parameter-group #TODO #A cluster parameter group to associate with the cluster.
            dbInstanceParameterGroupName: postgres-parameter-group #TODO # Instance parameter group to associate with all instances of the DB cluster. The db_instance_parameter_group_name parameter is only valid in combination with the allow_major_version_upgrade parameter.
            dbSubnetGroupNameRef: postgres-dbsubnetgroup-<< .config.aws.region >> #A DB subnet group to associate with this DB instance. 
            deletionProtection: << .config.rds.postgres.deletionProtection >>
            enabledCloudwatchLogsExports: #Set of log types to export to cloudwatch. If omitted, no logs will be exported. The following log types are supported: audit, error, general, slowquery, postgresql (PostgreSQL).
              - postgresql
            engine: << .config.rds.postgres.engine >> # The name of the database engine to be used for this DB cluster. Defaults to aurora. Valid Values: aurora, aurora-mysql, aurora-postgresql, mysql, postgres. (Note that mysql and postgres are Multi-AZ RDS clusters).
            engineMode: << .config.rds.postgres.engineMode >> # The database engine mode. Valid values: global (only valid for Aurora MySQL 1.21 and earlier), multimaster, parallelquery, provisioned, serverless. Defaults to: provisioned. See the RDS User Guide for limitations when using serverless.
            engineVersion: "<< .config.rds.postgres.engineVersion >>" # The database engine version. Updating this argument results in an outage. See the Aurora MySQL and Aurora Postgres documentation for your configured engine to determine this value. For example with Aurora MySQL 2, a potential value for this argument is 5.7.mysql_aurora.2.03.2. The value can contain a partial version where supported by the API. The actual engine version used is returned in the attribute engine_version_actual, , see Attributes Reference below.
            iamDatabaseAuthenticationEnabled: true # Specifies whether or not mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled. Please see AWS Documentation for availability and limitations.
            <<- range $value := $replica >>
            kmsKeyId: << $value.kmsKeyId >> #The ARN for the KMS encryption key. Default: managed `aws/rds` key. When specifying kms_key_id, storage_encrypted needs to be set to true.
            <<- end >>
            masterUsername: << .config.rds.postgres.masterUsername >>
            masterPasswordSecretRef:
              key: << .config.rds.postgres.masterPasswordSecretRef.key >>
              name: << .config.rds.postgres.masterPasswordSecretRef.name >>
              namespace: << .config.rds.postgres.masterPasswordSecretRef.namespace >>
            networkType: IPV4
            port: << .config.rds.postgres.port >>
            preferredBackupWindow: << .config.rds.postgres.preferredBackupWindow >> #The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC.
            preferredMaintenanceWindow: << .config.rds.postgres.preferredMaintenanceWindow >> #The weekly time range during which system maintenance can occur, in (UTC) e.g., wed:04:00-wed:04:30
            region: << .config.aws.region >>
            storageEncrypted: true # Specifies whether the DB cluster is encrypted. The default is false for provisioned engine_mode and true for serverless engine_mode. When restoring an unencrypted snapshot_identifier, the kms_key_id argument must be provided to encrypt the restored cluster.
            skipFinalSnapshot: << .config.rds.postgres.skipFinalSnapshot >>
          providerConfigRef:
            name: default
        patches:
          - type: PatchSet
            patchSetName: metadata
          - fromFieldPath: spec.datbaseName
            toFieldPath: spec.forProvider.databaseName
            policy:
              fromFieldPath: Required  
          - fromFieldPath: spec.engineVersion
            toFieldPath: spec.forProvider.engineVersion
            policy:
              fromFieldPath: Required  
          - fromFieldPath: spec.deletionProtection
            toFieldPath: spec.forProvider.deletionProtection
            policy:
              fromFieldPath: Required
          - fromFieldPath: spec.dbClusterInstanceClass
            toFieldPath: spec.forProvider.dbClusterInstanceClass
            policy:
              fromFieldPath: Required    
          - fromFieldPath: spec.skipFinalSnapshot
            toFieldPath: spec.forProvider.skipFinalSnapshot
          - fromFieldPath: spec.backupRetentionPeriod
            toFieldPath: spec.forProvider.backupRetentionPeriod
          - fromFieldPath: spec.preferredBackupWindow
            toFieldPath: spec.forProvider.preferredBackupWindow
          - fromFieldPath: spec.preferredMaintenanceWindow
            toFieldPath: spec.forProvider.preferredMaintenanceWindow
          - fromFieldPath: spec.applyImmediately
            toFieldPath: spec.forProvider.applyImmediately
            
